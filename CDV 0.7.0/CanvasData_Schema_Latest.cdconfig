var fs = require('fs');
var https = require('https');
//var json2csv = require('json2csv');
var CanvasDataAPICall = require('./CanvasDataAuth_Schema.js');
var sql = require("seriate");
var datetime = new Date();
var datetimeSimple = (datetime.getMonth() + 1) + '-' + datetime.getDate() + '-' +  datetime.getFullYear();

var request = require('request');

    var schKey=[];
    var schVal=[];

var download = function(uri, filename, callback){
  request.head(uri, function(err, res, body){

    var r = request(uri).pipe(fs.createWriteStream(filename));
    r.on('close', callback);

  });
};

JSON.flatten = function(data) {
          var flattenResult = {};
          function recurse (cur, prop) {
              if (Object(cur) !== cur) {
                  flattenResult[prop] = cur;
              } else if (Array.isArray(cur)) {
                   for(var i=0, l=cur.length; i<l; i++)
                       recurse(cur[i], prop + "[" + i + "]");
                  if (l == 0)
                      flattenResult[prop] = [];
              } else {
                  var isEmpty = true;
                  for (var p in cur) {
                      isEmpty = false;
                      recurse(cur[p], prop ? prop+"."+p : p);
                  }
                  if (isEmpty && prop)
                      flattenResult[prop] = {};
              }
          }
          recurse(data, "");
          //console.log(flattenResult)
          return flattenResult;
}

var config = {  
    "server": "IRCDSVRREPLACEME",
    "user": "IRCDSVRUSRREPLACEME",
    "password": "IRCDSVRUSRPWREPLACEME",
    "database": "CanvasData"
};

sql.setDefaultConfig( config );

CanvasDataAPICall('', function(result) {
       respAPIObj=result;
       respAPIObjSchema=respAPIObj.schema

      flattenResult = JSON.flatten(respAPIObjSchema);
      //console.log(result);
      //console.log(flattenResult);
      
      for (var k in flattenResult){
            if (flattenResult.hasOwnProperty(k)) {
                 //console.log(k);
                 //console.log(flattenResult[k]);

                value0=JSON.stringify(k);
                value1=JSON.stringify(flattenResult[k]);

                schKey.push(k)
                schVal.push(flattenResult[k])
            }
      }

    sql.execute( {  
        query: "TRUNCATE TABLE RAWSchemaKey " +
                "TRUNCATE TABLE RAWSchemaVal"
    } ).then( function( results ) {
        console.log( results );
    }, function( err ) {
        console.log( "Something bad happened:", err );
    } );
//////////////
    sql.execute( {  
        query: "INSERT INTO RawSchemaKey ([schKey]) " +
        "SELECT value FROM @schKey",
        params: {
          schKey: {
            val: schKey,
            type: sql.VARCHAR(4096),
            asTable: true
          }
        }
    } ).then( function( results ) {
        console.log( results );
    }, function( err ) {
        console.log( "Something bad happened:", err );
    } );
//////////////
    sql.execute( {  
        query: "INSERT INTO RawSchemaVal ([schVal]) " +
        "SELECT value FROM @schVal",
        params: {
          schVal: {
            val: schVal,
            type: sql.VARCHAR(4096),
            asTable: true
          }
        }
    } ).then( function( results ) {
        console.log( results );
    }, function( err ) {
        console.log( "Something bad happened:", err );
    } );
});
